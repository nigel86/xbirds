function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/index-pCnUjuIr.js","assets/index-Oc4W_B_p.css"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
import{C as H,g as B,cL as K,b as U,cM as m,q as I,B as d,cN as C,cO as L,as as G,cP as W,ao as V,cQ as N,cR as E,cS as $,aY as M,i as z,cT as j,Q as S,cU as b,cV as O,cW as k,cX as J,h as F,_ as R,cY as Y,cZ as q,c_ as Q,c$ as Z,b5 as A,au as P,k as X,cf as tt,cD as et,d0 as _,d1 as at,d2 as st,d3 as rt}from"./index-pCnUjuIr.js";async function T(c){const t=await m(c);return Object.keys(t).map(e=>{let a=t[e];return(typeof a!="string"||!a.startsWith("0x"))&&(a=F(a)),[e,a]}).reduce((e,a)=>{let[s,i]=a;return{...e,[s]:i}},{})}async function it(c,t,e){const a=await m(c),s={sender:a.sender,nonce:a.nonce,initCodeHash:A(a.initCode),callDataHash:A(a.callData),callGasLimit:a.callGasLimit,verificationGasLimit:a.verificationGasLimit,preVerificationGas:a.preVerificationGas,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,paymasterAndDataHash:A(a.paymasterAndData)},i={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"},r=P.encode([i],[{...s}]),n=A(r),u=P.encode(["bytes32","address","uint256"],[n,t,e]);return A(u)}const nt=()=>{const c=BigInt(Math.floor(Math.random()*4294967296)),t=BigInt(Math.floor(Math.random()*4294967296)),e=BigInt(Math.floor(Math.random()*4294967296)),a=BigInt(Math.floor(Math.random()*4294967296)),s=BigInt(Math.floor(Math.random()*4294967296)),i=BigInt(Math.floor(Math.random()*4294967296));return c<<BigInt(160)|t<<BigInt(128)|e<<BigInt(96)|a<<BigInt(64)|s<<BigInt(32)|i},D=()=>{let c=nt().toString(16);return c.length%2!==0&&(c="0"+c),c="0x"+c,d.from(rt([c,"0x0000000000000000"]))};class ot{}class ct{constructor(t,e,a,s,i){this.bundlerUrl=t,this.entryPointAddress=e,this.chainId=a;const r={};if(b(this.bundlerUrl)){const n=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;i?r["x-secret-key"]=i:s&&(r["x-client-id"]=s,n&&(r["x-bundle-id"]=n)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,r["x-authorize-wallet"]="true"),O(r)}this.userOpJsonRpcProvider=new k({url:this.bundlerUrl,headers:r},{name:"Connected bundler network",chainId:a}),this.initializing=this.validateChainId()}async validateChainId(){const t=await this.userOpJsonRpcProvider.send("eth_chainId",[]),e=parseInt(t);if(e!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${e}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(t){await this.initializing;const e=await T(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",a),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[e,this.entryPointAddress])}async estimateUserOpGas(t){await this.initializing;const e=await T(t),a=[e,this.entryPointAddress];return await this.printUserOperation("eth_estimateUserOperationGas",a),await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[e,this.entryPointAddress])}async printUserOperation(t,e){}}class dt extends ot{constructor(t,e,a,s){super(),this.paymasterUrl=t,this.entryPoint=e,this.clientId=a,this.secretKey=s}async getPaymasterAndData(t){var i;const e={"Content-Type":"application/json"};if(b(this.paymasterUrl)){if(this.secretKey&&this.clientId)throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");this.secretKey?e["x-secret-key"]=this.secretKey:this.clientId&&(e["x-client-id"]=this.clientId,typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis&&(e["x-bundle-id"]=globalThis.APP_BUNDLE_ID)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(e.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,e["x-authorize-wallet"]="true"),O(e)}const a=await fetch(this.paymasterUrl,{method:"POST",headers:e,body:JSON.stringify({jsonrpc:"2.0",id:1,method:"pm_sponsorUserOperation",params:[await T(t),this.entryPoint]})}),s=await a.json();if(!a.ok){const r=s.error||a.statusText,n=s.code||"UNKNOWN";throw new Error(`Paymaster error: ${r}
Status: ${a.status}
Code: ${n}`)}if(s.result)return typeof s.result=="string"?{paymasterAndData:s.result}:s.result;{const r=((i=s.error)==null?void 0:i.message)||s.error||a.statusText||"unknown error";throw new Error(`Paymaster error from ${this.paymasterUrl}: ${r}`)}}}const ht=(c,t,e,a)=>new dt(c,t,e,a);class x{constructor(t,e,a,s,i,r,n){this.resolve=t,this.reject=e,this.entryPoint=a,this.sender=s,this.userOpHash=i,this.nonce=r,this.timeout=n,R(this,"resolved",!1),this.boundLisener=this.listenerCallback.bind(this)}start(){const t=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const e=await this.entryPoint.queryFilter(t,-10);e.length>0?this.listenerCallback(e[0]):this.entryPoint.once(t,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(){var r;for(var t=arguments.length,e=new Array(t),a=0;a<t;a++)e[a]=arguments[a];const s=arguments[arguments.length-1];if(!s.args){console.error("got event without args",s);return}if(s.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${s.args.sender}@${s.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((r=this.nonce)==null?void 0:r.toString())}`);return}const i=await s.getTransactionReceipt();s.args.success||await this.extractFailureReason(i),this.stop(),this.resolve(i),this.resolved=!0}async extractFailureReason(t){t.status=0;const e=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),t.blockHash);if(e[0]){let a=e[0].args.revertReason;a.startsWith("0x08c379a0")&&(a=P.decode(["string"],"0x"+a.substring(10)).toString()),this.reject(new Error(`UserOp failed with reason: ${a}`))}}}class lt extends X{constructor(t,e,a,s,i){super(),tt(this,"provider",a),this.config=t,this.originalSigner=e,this.erc4337provider=a,this.httpRpcClient=s,this.smartAccountAPI=i,this.approving=!1}async sendTransaction(t,e){var u;if(!this.approving){this.approving=!0;const h=await this.smartAccountAPI.createApproveTx();h&&await(await this.sendTransaction(h)).wait(),this.approving=!1}const a=await m(t);await this.verifyAllNecessaryFields(a);const s=D(),i=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:((u=a.data)==null?void 0:u.toString())||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas},e),r=await this.smartAccountAPI.signUserOp(i),n=await this.erc4337provider.constructUserOpTransactionResponse(r);try{await this.httpRpcClient.sendUserOpToBundler(r)}catch(h){throw this.unwrapError(h)}return n}unwrapError(t){var e,a;try{let s="Unknown Error";if(t.error)s=`The bundler has failed to include UserOperation in a batch: ${t.error}`;else if(t.body&&typeof t.body=="string"){const r=JSON.parse(t.body),n=t.status||"UNKNOWN",u=(r==null?void 0:r.code)||"UNKNOWN";let h=((e=r==null?void 0:r.error)==null?void 0:e.message)||((a=r==null?void 0:r.error)==null?void 0:a.data)||(r==null?void 0:r.error)||t.reason;if(h!=null&&h.includes("FailedOp")){let f="";const o=h.match(/FailedOp\((.*)\)/);if(o){const p=o[1].split(",");f=`(paymaster address: ${p[1]})`,h=p[2]}s=`The bundler has failed to include UserOperation in a batch: ${h} ${f}`}else s=`RPC error: ${h}
Status: ${n}
Code: ${u}`}const i=new Error(s);return i.stack=t.stack,i}catch{}return t}async verifyAllNecessaryFields(t){if(!t.to)throw new Error("Missing call target");if(!t.data&&!t.value)throw new Error("Missing call data or value")}connect(t){throw new Error("changing providers is not supported")}async getAddress(){return this.address||(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(t){await this.smartAccountAPI.checkAccountPhantom()&&(console.log("Account contract not deployed yet. Deploying account before signing message"),await(await this.sendTransaction({to:await this.getAddress(),data:"0x"})).wait());const[a,s]=await Promise.all([this.getChainId(),this.getAddress()]),i=et(t);let r,n;const u=_(a,this.config.clientId),h={};if(b(u)){const o=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;this.config.secretKey?h["x-secret-key"]=this.config.secretKey:this.config.clientId&&(h["x-client-id"]=this.config.clientId,o&&(h["x-bundle-id"]=o)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(h.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(h.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,h["x-authorize-wallet"]="true"),O(h)}try{const o=new k({url:_(a,this.config.clientId),headers:h},a);await new S(s,["function getMessageHash(bytes32 _hash) public view returns (bytes32)"],o).getMessageHash(i),r=!0}catch{r=!1}if(r?n=(await at(this,{name:"Account",version:"1",chainId:a,verifyingContract:s},{AccountMessage:[{name:"message",type:"bytes"}]},{message:P.encode(["bytes32"],[i])})).signature:n=await this.originalSigner.signMessage(t),await st(t,n,s,a,this.config.clientId,this.config.secretKey))return n;throw new Error("Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.")}async signTransaction(t,e){var u;const a=await m(t);await this.verifyAllNecessaryFields(a);const s=D(),i=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:a.to||"",data:((u=a.data)==null?void 0:u.toString())||"0x",value:a.value,gasLimit:a.gasLimit,nonce:s},e),r=await this.smartAccountAPI.signUserOp(i);return JSON.stringify(await T(r))}}class ut extends J{constructor(t,e,a,s,i,r,n){super({name:"ERC-4337 Custom Network",chainId:t}),this.chainId=t,this.config=e,this.originalSigner=a,this.originalProvider=s,this.httpRpcClient=i,this.entryPoint=r,this.smartAccountAPI=n,this.signer=new lt(e,a,this,i,n)}getSigner(){return this.signer}async perform(t,e){if(t==="sendTransaction"||t==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");return t==="estimateGas"?d.from(5e5):await this.originalProvider.perform(t,e)}async getTransaction(t){return await super.getTransaction(t)}async getTransactionReceipt(t){const e=await t,a=await this.getSenderAccountAddress();return await new Promise((s,i)=>{new x(s,i,this.entryPoint,a,e).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(t,e,a){const s=await this.getSenderAccountAddress();return await new Promise((i,r)=>{new x(i,r,this.entryPoint,s,t,void 0,a).start()})}async constructUserOpTransactionResponse(t){const e=await m(t),a=await this.smartAccountAPI.getUserOpHash(e),s=async()=>await new Promise((i,r)=>{new x(i,r,this.entryPoint,e.sender,a,e.nonce).start()});return{hash:a,confirmations:0,from:e.sender,nonce:0,gasLimit:d.from(e.callGasLimit),value:d.from(0),data:F(e.callData),chainId:this.chainId,wait:async i=>{const r=await s();return e.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),r}}}async detectNetwork(){return this.originalProvider.detectNetwork()}}function gt(c,t,e,a){const s=N.EntryPoint__factory.connect(c.entryPointAddress,e),i=new ct(c.bundlerUrl,c.entryPointAddress,a,c.clientId,c.secretKey);return new ut(a,c,c.localSigner,e,i,s,t)}const pt="0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";class ft{constructor(t){R(this,"isPhantom",!0),this.provider=t.provider,this.entryPointAddress=t.entryPointAddress,this.accountAddress=t.accountAddress,this.paymasterAPI=t.paymasterAPI,this.gasless=t.gasless,this.erc20PaymasterAddress=t.erc20PaymasterAddress,this.erc20TokenAddress=t.erc20TokenAddress,this.entryPointView=N.EntryPoint__factory.connect(t.entryPointAddress,t.provider).connect(I)}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getUserOpHash(t){const e=await this.provider.getNetwork().then(a=>a.chainId);return it(t,this.entryPointAddress,e)}async getAccountAddress(){return this.senderAddress||(this.accountAddress?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(t){if(!t||t==="0x")return 0;const e=t.substring(0,42),a="0x"+t.substring(42);return await this.provider.estimateGas({to:e,data:a})}async createUnsignedUserOp(t,e,a){const s=await this.getInitCode(),i=wt(e.value)??d.from(0),r=a!=null&&a.batchData?e.data:await this.prepareExecute(e.target,i,e.data).then(l=>l.encode());let{maxFeePerGas:n,maxPriorityFeePerGas:u}=e;if(!n||!u){const l=await Y(this.provider);if(u||(u=l.maxPriorityFeePerGas??void 0),!n){n=l.maxFeePerGas??void 0;const w=(await this.provider.getNetwork()).chainId;(w===q.chainId||w===Q.chainId||w===Z.chainId)&&(u=n)}}if(!n||!u)throw new Error("maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely");const[h,f]=await Promise.all([this.getAccountAddress(),e.nonce?Promise.resolve(e.nonce):this.getNonce()]),o={sender:h,nonce:f,initCode:s,callData:r,maxFeePerGas:n,maxPriorityFeePerGas:u,callGasLimit:d.from(1e6),verificationGasLimit:d.from(1e6),preVerificationGas:d.from(1e6),paymasterAndData:"0x",signature:pt},p=(a==null?void 0:a.gasless)!==void 0?a.gasless:this.gasless;if(this.erc20PaymasterAddress&&this.erc20TokenAddress&&await this.isAccountApproved()){o.paymasterAndData=this.erc20PaymasterAddress;let l;try{l=await t.estimateUserOpGas(o)}catch(g){throw this.unwrapBundlerError(g)}o.callGasLimit=d.from(l.callGasLimit),o.verificationGasLimit=d.from(l.verificationGasLimit),o.preVerificationGas=d.from(l.preVerificationGas)}else if(p){const l=await this.paymasterAPI.getPaymasterAndData(o),g=l.paymasterAndData;if(g&&g!=="0x"&&(o.paymasterAndData=g),l.callGasLimit&&l.verificationGasLimit&&l.preVerificationGas)o.callGasLimit=d.from(l.callGasLimit),o.verificationGasLimit=d.from(l.verificationGasLimit),o.preVerificationGas=d.from(l.preVerificationGas);else{let w;try{w=await t.estimateUserOpGas(o)}catch(y){throw this.unwrapBundlerError(y)}if(o.callGasLimit=d.from(w.callGasLimit),o.verificationGasLimit=d.from(w.verificationGasLimit),o.preVerificationGas=d.from(w.preVerificationGas),g&&g!=="0x"){const y=await this.paymasterAPI.getPaymasterAndData(o);y.paymasterAndData&&y.paymasterAndData!=="0x"&&(o.paymasterAndData=y.paymasterAndData)}}}else{let l;try{l=await t.estimateUserOpGas(o)}catch(g){throw this.unwrapBundlerError(g)}o.callGasLimit=d.from(l.callGasLimit),o.verificationGasLimit=d.from(l.verificationGasLimit),o.preVerificationGas=d.from(l.preVerificationGas)}return{...o,signature:""}}async signUserOp(t){const e=await this.getUserOpHash(t),a=await this.signUserOpHash(e);return{...t,signature:a}}async getUserOpReceipt(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3e4,a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:2e3;const s=Date.now()+e;for(;Date.now()<s;){const i=await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(t));if(i[0])return i[0].transactionHash;await new Promise(r=>setTimeout(r,a))}return null}unwrapBundlerError(t){var a;const e=((a=t==null?void 0:t.error)==null?void 0:a.message)||t.error||t.message||t;return new Error(e)}}function wt(c){return!c||c===""?null:d.from(c.toString())}class mt extends ft{constructor(t,e){super({...t,provider:e}),this.params=t,this.sdk=C.fromPrivateKey(E,t.chain,{clientId:t.clientId,secretKey:t.secretKey,supportedChains:typeof t.chain=="object"?[t.chain]:void 0})}async getChainId(){return await this.provider.getNetwork().then(t=>t.chainId)}async getAccountContract(){var t;return this.accountContract||((t=this.params.accountInfo)!=null&&t.abi?this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),this.params.accountInfo.abi):this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),L)),this.accountContract}async getAccountInitCode(){const t=await this.getFactoryContract(),e=await this.params.localSigner.getAddress(),a=await this.params.factoryInfo.createAccount(t,e);return $([t.getAddress(),a.encode()])}async getFactoryContract(){var t;return this.factoryContract?this.factoryContract:((t=this.params.factoryInfo)!=null&&t.abi?this.factoryContract=await this.sdk.getContract(this.params.factoryAddress,this.params.factoryInfo.abi):this.factoryContract=await this.sdk.getContract(this.params.factoryAddress),this.factoryContract)}async getCounterFactualAddress(){if(this.params.accountAddress)return this.params.accountAddress;const t=await this.getFactoryContract(),e=await this.params.localSigner.getAddress();return this.params.factoryInfo.getAccountAddress(t,e)}async getNonce(){if(await this.checkAccountPhantom())return d.from(0);const t=await this.getAccountContract();return this.params.accountInfo.getNonce(t)}async prepareExecute(t,e,a){const s=await this.getAccountContract();return this.params.accountInfo.execute(s,t,e,a)}async prepareExecuteBatch(t,e,a){return(await this.getAccountContract()).prepare("executeBatch",[t,e,a])}async signUserOpHash(t){return await this.params.localSigner.signMessage(M(t))}async isAcountDeployed(){return!await this.checkAccountPhantom()}async isAccountApproved(){if(!this.params.erc20PaymasterAddress||!this.params.erc20TokenAddress)return!0;const t=await this.getCounterFactualAddress(),e=(await z(()=>import("./index-pCnUjuIr.js").then(i=>i.dy),__vite__mapDeps([0,1]))).default;return(await(await this.sdk.getContract(this.params.erc20TokenAddress,e)).call("allowance",[t,this.params.erc20PaymasterAddress])).gte(d.from(2).pow(96).sub(1))}async createApproveTx(){if(await this.isAccountApproved())return;const t=d.from(2).pow(96).sub(1),e=new j(E,this.provider),a=new S(this.params.erc20TokenAddress,["function approve(address spender, uint256 amount) public returns (bool)"],e);return{to:this.params.erc20TokenAddress,from:await this.getAccountAddress(),value:0,data:a.interface.encodeFunctionData("approve",[this.params.erc20PaymasterAddress,t])}}}class At extends H{constructor(t){super(),this.config=t}async initialize(t){var f,o,p,v,l,g;const e=this.config,a=B(e.chain,{clientId:e.clientId,secretKey:e.secretKey});this.chainId=(await a.getNetwork()).chainId;const s=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,i=this.config.paymasterUrl||`https://${this.chainId}.bundler.thirdweb.com/v2`,r=e.entryPointAddress||K,n=await t.personalWallet.getSigner(),u={chain:e.chain,localSigner:n,entryPointAddress:r,bundlerUrl:s,paymasterAPI:this.config.paymasterAPI?this.config.paymasterAPI:ht(i,r,this.config.clientId,this.config.secretKey),gasless:e.gasless,factoryAddress:e.factoryAddress,accountAddress:t.accountAddress,factoryInfo:{createAccount:((f=e.factoryInfo)==null?void 0:f.createAccount)||this.defaultFactoryInfo().createAccount,getAccountAddress:((o=e.factoryInfo)==null?void 0:o.getAccountAddress)||this.defaultFactoryInfo().getAccountAddress,abi:(p=e.factoryInfo)==null?void 0:p.abi},accountInfo:{execute:((v=e.accountInfo)==null?void 0:v.execute)||this.defaultAccountInfo().execute,getNonce:((l=e.accountInfo)==null?void 0:l.getNonce)||this.defaultAccountInfo().getNonce,abi:(g=e.accountInfo)==null?void 0:g.abi},clientId:e.clientId,secretKey:e.secretKey,erc20PaymasterAddress:e.erc20PaymasterAddress,erc20TokenAddress:e.erc20TokenAddress};this.personalWallet=t.personalWallet;const h=new mt(u,a);this.aaProvider=gt(u,h,a,this.chainId),this.accountApi=h}async connect(t){return await this.initialize(t),await this.getAddress()}getProvider(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider)}async getSigner(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider.getSigner())}async getAddress(){return(await this.getSigner()).getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async disconnect(){this.personalWallet=void 0,this.aaProvider=void 0}async switchChain(t){if((await(await this.getProvider()).getNetwork()).chainId!==t)throw new Error("Not supported.")}setupListeners(){return Promise.resolve()}updateChains(t){}async hasPermissionToExecute(t){var r;const e=await this.getAccountContract(),s=await(await this.getSigner()).getAddress(),i=(r=(await e.account.getAllSigners()).filter(n=>U(n.signer)===U(s))[0])==null?void 0:r.permissions;return i?i.approvedCallTargets.includes(t.getTarget()):!1}async send(t,e){return(await this.getSigner()).sendTransaction({to:t.getTarget(),data:t.encode(),value:await t.getValue()},e)}async execute(t,e){return{receipt:await(await this.send(t,e)).wait()}}async sendBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),{tx:s,batchData:i}=await this.prepareBatchTx(t);return await a.sendTransaction({to:await a.getAddress(),data:s.encode(),value:0},{...e,batchData:i})}async executeBatch(t,e){return{receipt:await(await this.sendBatch(t,e)).wait()}}async sendRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return(await this.getSigner()).sendTransaction(t,e)}async executeRaw(t,e){return{receipt:await(await this.sendRaw(t,e)).wait()}}async sendBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await this.getSigner(),s=await this.prepareBatchRaw(t);return a.sendTransaction({to:await a.getAddress(),data:s.tx.encode(),value:0},{...e,batchData:s.batchData})}async executeBatchRaw(t,e){return{receipt:await(await this.sendBatchRaw(t,e)).wait()}}async estimate(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");return this.estimateTx({target:t.getTarget(),data:t.encode(),value:await t.getValue(),gasLimit:await t.getOverrides().gasLimit,maxFeePerGas:await t.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await t.getOverrides().maxPriorityFeePerGas,nonce:await t.getOverrides().nonce},e)}async estimateRaw(t,e){var s;if(!this.accountApi)throw new Error("Personal wallet not connected");const a=await m(t);return this.estimateTx({target:a.to||I,data:((s=a.data)==null?void 0:s.toString())||"",value:a.value||d.from(0),gasLimit:a.gasLimit,maxFeePerGas:a.maxFeePerGas,maxPriorityFeePerGas:a.maxPriorityFeePerGas,nonce:a.nonce},e)}async estimateBatch(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchTx(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async estimateBatchRaw(t,e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:a,batchData:s}=await this.prepareBatchRaw(t);return this.estimateTx({target:a.getTarget(),data:a.encode(),value:await a.getValue(),gasLimit:await a.getOverrides().gasLimit,maxFeePerGas:await a.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await a.getOverrides().maxPriorityFeePerGas,nonce:await a.getOverrides().nonce},{...e,batchData:s})}async deploy(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.getSigner();return{receipt:await(await e.sendTransaction({to:await e.getAddress(),data:"0x"},{...t,batchData:{targets:[],data:[],values:[]}})).wait()}}async isDeployed(){if(!this.accountApi)throw new Error("Personal wallet not connected");return await this.accountApi.isAcountDeployed()}async deployIfNeeded(t){await this.isDeployed()||await this.deploy(t)}async grantPermissions(t,e){return(await this.getAccountContract()).account.grantPermissions(t,e)}async revokePermissions(t){return(await this.getAccountContract()).account.revokeAccess(t)}async addAdmin(t){return(await this.getAccountContract()).account.grantAdminPermissions(t)}async removeAdmin(t){return(await this.getAccountContract()).account.revokeAdminPermissions(t)}async getAllActiveSigners(){var e;if(await this.isDeployed())return(await this.getAccountContract()).account.getAllAdminsAndSigners();{const a=await((e=this.personalWallet)==null?void 0:e.getSigner());if(!a)throw new Error("Personal wallet not connected");return[{isAdmin:!0,signer:await a.getAddress(),permissions:{startDate:new Date(0),expirationDate:new Date(0),nativeTokenLimitPerTransaction:d.from(0),approvedCallTargets:[]}}]}}async getAccountContract(){var e;const t=C.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(e=this.config.accountInfo)!=null&&e.abi?t.getContract(await this.getAddress(),this.config.accountInfo.abi):t.getContract(await this.getAddress(),L)}async getFactoryContract(){var e;const t=C.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(e=this.config.factoryInfo)!=null&&e.abi?t.getContract(this.config.factoryAddress,this.config.factoryInfo.abi):t.getContract(this.config.factoryAddress)}defaultFactoryInfo(){return{createAccount:async(t,e)=>t.prepare("createAccount",[e,G("")]),getAccountAddress:async(t,e)=>await t.call("getAddress",[e,G("")])}}defaultAccountInfo(){return{execute:async(t,e,a,s)=>t.prepare("execute",[e,a,s]),getNonce:async t=>t.call("getNonce",[])}}async estimateTx(t,e){if(!this.accountApi||!this.aaProvider)throw new Error("Personal wallet not connected");let a=d.from(0);const[s,i]=await Promise.all([this.getProvider(),this.isDeployed()]);i||(a=await this.estimateDeploymentGasLimit());const[r,n]=await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient,t,e),W(s)]),u=await m(r),h=d.from(u.callGasLimit),f=h.mul(n),o=a.mul(n),p=o.add(f);return{ether:V(p),wei:p,details:{deployGasLimit:a,transactionGasLimit:h,gasPrice:n,transactionCost:f,deployCost:o,totalCost:p}}}async estimateDeploymentGasLimit(){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.accountApi.getInitCode(),[e,a]=await Promise.all([this.accountApi.estimateCreationGas(t),this.accountApi.getVerificationGasLimit()]);return d.from(a).add(e)}async prepareBatchRaw(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await Promise.all(t.map(r=>m(r))),a=e.map(r=>r.to||I),s=e.map(r=>r.data||"0x"),i=e.map(r=>r.value||d.from(0));return{tx:await this.accountApi.prepareExecuteBatch(a,i,s),batchData:{targets:a,data:s,values:i}}}async prepareBatchTx(t){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=t.map(i=>i.getTarget()),a=t.map(i=>i.encode()),s=await Promise.all(t.map(i=>i.getValue()));return{tx:await this.accountApi.prepareExecuteBatch(e,s,a),batchData:{targets:e,data:a,values:s}}}}export{At as SmartWalletConnector};
